import 'package:equatable/equatable.dart';
import 'package:hive/hive.dart';
import 'package:uuid/uuid.dart';

//part 'insight.g.dart'; // This will be generated by build_runner

@HiveType(typeId: 0)
class Insight with EquatableMixin {
  @HiveField(0)
  final String id;
  
  @HiveField(1)
  final String title;
  
  @HiveField(2)
  final String content;
  
  @HiveField(3)
  final List<String> tags;
  
  @HiveField(4)
  final String? categoryId;
  
  @HiveField(5)
  final DateTime createdAt;
  
  @HiveField(6)
  final DateTime updatedAt;

  @HiveField(7)
  final bool isFavorite;

  Insight({
    required this.id,
    required this.title,
    required this.content,
    required this.tags,
    this.categoryId,
    required this.createdAt,
    required this.updatedAt,
    this.isFavorite = false,
  });

  // Factory constructor to create a new insight
  factory Insight.create({
    required String title,
    required String content,
    List<String>? tags,
    String? categoryId,
    bool isFavorite = false,
  }) {
    final now = DateTime.now();
    return Insight(
      id: const Uuid().v4(),
      title: title,
      content: content,
      tags: tags ?? [],
      categoryId: categoryId,
      createdAt: now,
      updatedAt: now,
      isFavorite: isFavorite,
    );
  }

  // Create a copy with updated fields
  Insight copyWith({
    String? title,
    String? content,
    List<String>? tags,
    String? categoryId,
    DateTime? updatedAt,
    bool? isFavorite,
  }) {
    return Insight(
      id: id,
      title: title ?? this.title,
      content: content ?? this.content,
      tags: tags ?? this.tags,
      categoryId: categoryId ?? this.categoryId,
      createdAt: createdAt,
      updatedAt: updatedAt ?? DateTime.now(),
      isFavorite: isFavorite ?? this.isFavorite,
    );
  }

  @override
  List<Object?> get props => [
        id,
        title,
        content,
        tags,
        categoryId,
        createdAt,
        updatedAt,
        isFavorite,
      ];
}

// Hive type adapter for Insight model
class InsightAdapter extends TypeAdapter<Insight> {
  @override
  final int typeId = 0;

  @override
  Insight read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    
    return Insight(
      id: fields[0] as String,
      title: fields[1] as String,
      content: fields[2] as String,
      createdAt: fields[3] as DateTime,
      updatedAt: fields[4] as DateTime,
      categoryId: fields[5] as String?,
      tags: (fields[6] as List).cast<String>(),
      isFavorite: fields[7] as bool,
    );
  }

  @override
  void write(BinaryWriter writer, Insight obj) {
    writer.writeByte(8);
    writer.writeByte(0);
    writer.write(obj.id);
    writer.writeByte(1);
    writer.write(obj.title);
    writer.writeByte(2);
    writer.write(obj.content);
    writer.writeByte(3);
    writer.write(obj.createdAt);
    writer.writeByte(4);
    writer.write(obj.updatedAt);
    writer.writeByte(5);
    writer.write(obj.categoryId);
    writer.writeByte(6);
    writer.write(obj.tags);
    writer.writeByte(7);
    writer.write(obj.isFavorite);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is InsightAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}
import 'package:equatable/equatable.dart';
import 'package:hive/hive.dart';
import 'package:uuid/uuid.dart';

part 'relationship.g.dart'; // This will be generated by build_runner

@HiveType(typeId: 2)
enum RelationshipType {
  @HiveField(0)
  association,
  
  @HiveField(1)
  causality,
  
  @HiveField(2)
  hierarchy,
  
  @HiveField(3)
  similarity,
  
  @HiveField(4)
  contrast,
  
  @HiveField(5)
  custom
}

@HiveType(typeId: 3)
class Relationship extends Equatable {
  @HiveField(0)
  final String id;
  
  @HiveField(1)
  final String sourceId;
  
  @HiveField(2)
  final String targetId;
  
  @HiveField(3)
  final RelationshipType type;
  
  @HiveField(4)
  final String? label;
  
  @HiveField(5)
  final double strength;
  
  @HiveField(6)
  final DateTime createdAt;

  const Relationship({
    required this.id,
    required this.sourceId,
    required this.targetId,
    required this.type,
    this.label,
    required this.strength,
    required this.createdAt,
  });

  // Factory constructor to create a new relationship
  factory Relationship.create({
    required String sourceId,
    required String targetId,
    required RelationshipType type,
    String? label,
    double strength = 0.5,
  }) {
    return Relationship(
      id: const Uuid().v4(),
      sourceId: sourceId,
      targetId: targetId,
      type: type,
      label: label,
      strength: strength.clamp(0.0, 1.0),
      createdAt: DateTime.now(),
    );
  }

  // Create a copy with updated fields
  Relationship copyWith({
    RelationshipType? type,
    String? label,
    double? strength,
  }) {
    return Relationship(
      id: id,
      sourceId: sourceId,
      targetId: targetId,
      type: type ?? this.type,
      label: label ?? this.label,
      strength: (strength ?? this.strength).clamp(0.0, 1.0),
      createdAt: createdAt,
    );
  }

  @override
  List<Object?> get props => [
        id,
        sourceId,
        targetId,
        type,
        label,
        strength,
        createdAt,
      ];
}